import string;
import lingo/pegcode/driver;
import ds/tree;
import math/math;

/*
Расширьте язык арифметических выражений вычитанием, делением, сменой знака и переменными. 
Для полученного нового языка алгебраических выражений напишите функцию, 
которая вычисляет значение выражения при заданных значениях входящих в него переменных, 
которые могут быть рациональными.
*/

export {
    Expr ::= Sum, Mul, Sub, Div, Int, Var, Neg;
        Sum : (lVal : Expr, rVal : Expr);
        Mul : (lVal : Expr, rVal : Expr);
        Sub : (lVal : Expr, rVal : Expr);
        Div : (lVal : Expr, rVal : Expr);
        Var : (val : string);
        Int : (val : int);
        Neg : (val : Expr);

    ratNum : (numerator : int, denominator : int);

    sumRatNum(l : Maybe<ratNum>, r : Maybe<ratNum>)       -> Maybe<ratNum>;
    minusRatNum(l : Maybe<ratNum>, r : Maybe<ratNum>)     -> Maybe<ratNum>;
    mulRatNum(l : Maybe<ratNum>, r : Maybe<ratNum>)       -> Maybe<ratNum>;
    divRatNum(l : Maybe<ratNum>, r : Maybe<ratNum>)       -> Maybe<ratNum>;
    ratNum2s(rat : Maybe<ratNum>)                         -> string;
    parse(str : string)                                   -> Expr;
    expr2s(v : Expr)                                      -> string;
    calculateRat(v : Expr, params : Tree<string, ratNum>) -> Maybe<ratNum>;
}

sumRatNum(l : Maybe<ratNum>, r : Maybe<ratNum>) -> Maybe<ratNum> {
    if (isSome(l) && isSome(r)) {
        newL = either(l, ratNum(0,0));
        newR = either(r, ratNum(0,0));

        nok = lcm(newL.denominator, newR.denominator);
        newNumerator = nok / newL.denominator * newL.numerator + nok / newR.denominator * newR.numerator;
        newDenominator = nok;

        nod = iabs(gcd(newNumerator, newDenominator));
        Some(ratNum(newNumerator / nod, newDenominator / nod));
    } else {
        None();
    }
}

minusRatNum(l : Maybe<ratNum>, r : Maybe<ratNum>) -> Maybe<ratNum> {
    if (isSome(l) && isSome(r)) {
        newL = either(l, ratNum(0,0));
        newR = either(r, ratNum(0,0));

        nok = lcm(newL.denominator, newR.denominator);
        newNumerator = nok / newL.denominator * newL.numerator - nok / newR.denominator * newR.numerator;
        newDenominator = nok;

        nod = iabs(gcd(newNumerator, newDenominator));
        Some(ratNum(newNumerator / nod, newDenominator / nod));
    } else {
        None();
    }
}

mulRatNum(l : Maybe<ratNum>, r : Maybe<ratNum>) -> Maybe<ratNum> { // A/B * C/D
    if (isSome(l) && isSome(r)) {
        newL = either(l, ratNum(0,0));
        newR = either(r, ratNum(0,0));

        nodAD = iabs(gcd(newL.numerator, newR.denominator));
        nodBC = iabs(gcd(newL.denominator, newR.numerator));
        newNumerator = newL.numerator / nodAD * newR.numerator / nodBC;
        newDenominator = newL.denominator / nodBC * newR.denominator / nodAD;

        nod = iabs(gcd(newNumerator, newDenominator));
        Some(ratNum(newNumerator / nod, newDenominator / nod));
    } else {
        None();
    }
}

divRatNum(l : Maybe<ratNum>, r : Maybe<ratNum>) -> Maybe<ratNum> { // A/B / C/D
    if (isSome(l) && isSome(r)) {
        newL = either(l, ratNum(0,0));
        newR = either(r, ratNum(0,0));

        nodAC = iabs(gcd(newL.numerator, newR.numerator));
        nodBD = iabs(gcd(newL.denominator, newR.denominator));
        newNumerator = newL.numerator / nodAC * newR.denominator / nodBD;
        newDenominator = newL.denominator / nodBD * newR.numerator / nodAC;

        if (newDenominator == 0) {
            println("Division by zero...");
            None();
        } else {
            nod = iabs(gcd(newNumerator, newDenominator));
            Some(ratNum(newNumerator / nod, newDenominator / nod));
        }
    } else {
        None();
    }
}

ratNum2s(rat : Maybe<ratNum>) -> string {
    if (isSome(rat)) {
        newRat = either(rat, ratNum(0,0));
        if (newRat.denominator == 0) "Division by zero..."
        else if (newRat.denominator == 1) i2s(newRat.numerator)
        else i2s(newRat.numerator) + "/" + i2s(newRat.denominator);
    } else {
        "Calculate error...";
    }
}

parse(str : string) -> Expr {
    e_gr = "#include grammar/grammarRat.lingo";
    parsic(
        compilePegGrammar(e_gr),
        str,
        defaultPegActions
    );
}

expr2s(v : Expr) -> string {
    switch (v) {
		Mul(a, b) : "(" + expr2s(a) + "*" + expr2s(b) + ")";
		Sum(a, b) : "(" + expr2s(a) + "+" + expr2s(b) + ")";
        Div(a, b) : "(" + expr2s(a) + "/" + expr2s(b) + ")";
        Sub(a, b) : "(" + expr2s(a) + "-" + expr2s(b) + ")";
        Neg(a)    : "-" + expr2s(a);
        Int(a)    : i2s(a);
        Var(a)    : a;
	}
}

calculateRat(v : Expr, params : Tree<string, ratNum>) -> Maybe<ratNum> {
    switch (v) {
        Sum(a, b) : sumRatNum(calculateRat(a, params), calculateRat(b, params));
        Mul(a, b) : mulRatNum(calculateRat(a, params), calculateRat(b, params));
        Div(a, b) : divRatNum(calculateRat(a, params), calculateRat(b, params));
        Sub(a, b) : minusRatNum(calculateRat(a, params), calculateRat(b, params));
        Neg(a)    : mulRatNum(Some(ratNum(-1, 1)), calculateRat(a, params)); 
        Int(a)    : Some(ratNum(a, 1));
        Var(a)    : lookupTree(params, a);
    }
}