import calcPolynomRat;

/*
Реализуйте функцию упрощения рациональной функции по заданному набору тождеств.
*/

export {
    simplificationByIdentity(polynom : ratPolynom, identity : Pair<Expr, Expr>)       -> ratPolynom;
    simplificationByIdentities(polynom : ratPolynom, identities : [Pair<Expr, Expr>]) -> ratPolynom;
}

simplificationByIdentities(polynom : ratPolynom, identities : [Pair<Expr, Expr>]) -> ratPolynom {
    fold(identities, polynom, \acc, elem -> simplificationByIdentity(polynom, elem));
}

simplificationByIdentity(polynom : ratPolynom, identity : Pair<Expr, Expr>) -> ratPolynom {
    num = polynom.numerator;
    den = polynom.denominator;
    newNum = simplificationByIdentityExpr(num, identity);
    newDen = simplificationByIdentityExpr(den, identity);
    ratPolynom(newNum, newDen);
}

simplificationByIdentityExpr(ex : Expr, identity : Pair<Expr, Expr>) -> Expr {
    pr = comparisonOfExpr(ex, identity.first, makeTree());
    if (pr.first) {
        simplificationByIdentityExpr(significationExpr(identity.second, pr.second), identity);
    } else switch (ex) {
            Sum(a, b) : 
                Sum(simplificationByIdentityExpr(a, identity), simplificationByIdentityExpr(b, identity));
            Mul(a, b) : 
                Mul(simplificationByIdentityExpr(a, identity), simplificationByIdentityExpr(b, identity));
            Div(a, b) : 
                Div(simplificationByIdentityExpr(a, identity), simplificationByIdentityExpr(b, identity));
            Sub(a, b) : 
                Sub(simplificationByIdentityExpr(a, identity), simplificationByIdentityExpr(b, identity));
            Neg(a) : 
                Neg(simplificationByIdentityExpr(a, identity));
            Int(a) : 
                Int(a);
            Var(a) : 
                Var(a);
        }
}

comparisonOfExpr(comparable : Expr, sample : Expr, tr : Tree<Var, Expr>) -> Pair<bool, Tree<Var, Expr>> {
    if (sample.structname == "Var") {
        vr = cast(sample : Expr -> Var);
        switch (lookupTree(tr, vr)) {
            Some(val) : if (comparable == val) Pair(true, tr)
                        else Pair(false, makeTree());
            None() : Pair(true, setTree(tr, vr, comparable));
        }
    }
    else if (comparable.structname == "Var" || comparable.structname == "Int") Pair(false, makeTree())
    else if (comparable.structname != sample.structname) Pair(false, makeTree())
    else {
        switch (sample) {
            Sum(a, b) : {
                tSum1 = cast(comparable : Expr -> Sum);
                tSum2 = sample;
                pr1 = comparisonOfExpr(tSum1.lVal, tSum2.lVal, tr);
                pr2 = comparisonOfExpr(tSum1.rVal, tSum2.rVal, tr);
                if (pr1.first && pr2.first) {
                    nTr = comparisonOfTree(pr1.second, pr2.second);
                    if (isEmptyTree(nTr)) Pair(false, nTr)
                    else Pair(true, nTr);
                }
                else Pair(false, makeTree());
            }
            Mul(a, b) : {
                tMul1 = cast(comparable : Expr -> Mul);
                tMul2 = sample;
                pr1 = comparisonOfExpr(tMul1.lVal, tMul2.lVal, tr);
                pr2 = comparisonOfExpr(tMul1.rVal, tMul2.rVal, tr);
                if (pr1.first && pr2.first) {
                    nTr = comparisonOfTree(pr1.second, pr2.second);
                    if (isEmptyTree(nTr)) Pair(false, nTr)
                    else Pair(true, nTr);
                }
                else Pair(false, makeTree());
            }
            Div(a, b) : {
                tDiv1 = cast(comparable : Expr -> Div);
                tDiv2 = sample;
                pr1 = comparisonOfExpr(tDiv1.lVal, tDiv2.lVal, tr);
                pr2 = comparisonOfExpr(tDiv1.rVal, tDiv2.rVal, tr);
                if (pr1.first && pr2.first) {
                    nTr = comparisonOfTree(pr1.second, pr2.second);
                    if (isEmptyTree(nTr)) Pair(false, nTr)
                    else Pair(true, nTr);
                }
                else Pair(false, makeTree());
            }
            Sub(a, b) : {
                tSub1 = cast(comparable : Expr -> Sub);
                tSub2 = sample;
                pr1 = comparisonOfExpr(tSub1.lVal, tSub2.lVal, tr);
                pr2 = comparisonOfExpr(tSub1.rVal, tSub2.rVal, tr);
                if (pr1.first && pr2.first) {
                    nTr = comparisonOfTree(pr1.second, pr2.second);
                    if (isEmptyTree(nTr)) Pair(false, nTr)
                    else Pair(true, nTr);
                }
                else Pair(false, makeTree());
            }
            Neg(a)    : {
                tNeg1 = cast(comparable : Expr -> Neg);
                tNeg2 = sample;
                comparisonOfExpr(tNeg1.val, tNeg2.val, tr);
            }
            Int(a)    : Pair(false, makeTree());
            Var(a)    : Pair(false, makeTree());
        }
    }
}

comparisonOfTree(tr1 : Tree<Var, Expr>, tr2 : Tree<Var, Expr>) -> Tree<Var, Expr> {
    if (isEmptyTree(tr1) || isEmptyTree(tr2)) makeTree()
    else foldTree(tr1, tr2, \key, val, acc -> {
        switch (lookupTree(acc, key)) {
            Some(p) : if (isEmptyTree(acc)) acc
                      else if (p == val) acc
                      else makeTree();
            None()  : if (isEmptyTree(acc)) acc
                      else setTree(acc, key, val);
        }
    });
}

significationExpr(ex : Expr, tr : Tree<Var, Expr>) -> Expr{
    switch(ex) {
        Sum(a, b) : Sum(significationExpr(a, tr), significationExpr(b, tr));
        Mul(a, b) : Mul(significationExpr(a, tr), significationExpr(b, tr));
        Div(a, b) : Div(significationExpr(a, tr), significationExpr(b, tr));
        Sub(a, b) : Sub(significationExpr(a, tr), significationExpr(b, tr));
        Neg(a)    : Neg(significationExpr(a, tr));
        Int(a)    : Int(a);
        Var(a)    : either(lookupTree(tr, ex), Int(0));
    }
}