import calcRat;

/*
Реализуйте функцию дифференцирования алгебраического выражения по заданной переменной. 
Напишите функцию упрощения, которая удаляет выражения вида 1 + 0 и x * 0.
*/

export {
    differentiation(ex : Expr, var : Var) -> Expr;
    simplification(ex : Expr)             -> Expr;
}

differentiation(ex : Expr, var : Var) -> Expr {
    switch (ex) {
        Mul(a, b) : 
            simplification( Sum(
                simplification( Mul(differentiation(a, var), b) ), 
                simplification( Mul(a, differentiation(b, var)) ))
            );
        Sum(a, b) : 
            simplification( Sum(
                differentiation(a, var), 
                differentiation(b, var))
            );
        Sub(a, b) : 
            simplification( Sub(
                differentiation(a, var), 
                differentiation(b, var))
            );
        Div(a, b) : 
            simplification( Div(
                simplification( Sub(
                    simplification( Mul(differentiation(a, var), b) ), 
                    simplification( Mul(a, differentiation(b, var))) ) ), 
                simplification( Mul(b, b) ))
            );
        Var(a) : 
            if (a == var.val) Int(1)
            else Int(0);
        Int(a) : 
            Int(0);
        Neg(a) : 
            simplification( Neg(differentiation(a, var)) );
    }
}

simplification(ex : Expr) -> Expr {
    switch (ex) {
		Mul(a, b) : 
            if (a == Int(0) || b == Int(0)) Int(0)
            else if (a == Int(1)) simplification( b )
            else if (b == Int(1)) simplification( a )
            else if (a.structname == "Int" && b.structname == "Mul") {
                tInt = cast(a : Expr -> Int);
                tMul = cast(b : Expr -> Mul);
                if (tMul.lVal.structname == "Int") {
                    tInt2 = cast(tMul.lVal : Expr -> Int);
                    simplification( Mul(Int(tInt.val * tInt2.val), tMul.rVal) );
                } else if (tMul.rVal.structname == "Int") {
                    tInt2 = cast(tMul.rVal : Expr -> Int);
                    simplification( Mul(Int(tInt.val * tInt2.val), tMul.lVal) );
                } else {
                    Mul(a, b);
                }
            }
            else if (a.structname == "Mul" && b.structname == "Int") {
                simplification( Mul(b, a) )
            }
            else if (a.structname == "Int" && b.structname == "Int") {
                tInt  = cast(a : Expr -> Int);
                tInt2 = cast(b : Expr -> Int);
                Int(tInt.val * tInt2.val);
            }
            else Mul(a, b);
		Sum(a, b) :
            if (a == Int(0)) simplification( b )
            else if (b == Int(0)) simplification( a ) 
            else if (a == b) simplification( Mul(Int(2), a) )
            else if (a.structname == "Int" && b.structname == "Int") {
                tInt  = cast(a : Expr -> Int);
                tInt2 = cast(b : Expr -> Int);
                Int(tInt.val + tInt2.val);
            }
            else if (a.structname == "Sum" && b.structname == "Int") {
                tSum = cast(a : Expr -> Sum);
                tInt = cast(b : Expr -> Int);
                if (tSum.lVal.structname == "Int") {
                    tInt2 = cast(tSum.lVal : Expr -> Int);
                    simplification( Sum(Int(tInt2.val + tInt.val), tSum.rVal) );
                } else if (tSum.rVal.structname == "Int") {
                    tInt2 = cast(tSum.rVal : Expr -> Int);
                    simplification( Sum(tSum.lVal, Int(tInt2.val + tInt.val)) );
                } else {
                    Sum(a, b);
                }
            }
            else if (a.structname == "Int" && b.structname == "Sum") {
                simplification ( Sum(b, a) );
            }
            else if (a.structname == "Sub" && b.structname == "Int") {
                tSub = cast(a : Expr -> Sub);
                tInt = cast(b : Expr -> Int);
                if (tSub.lVal.structname == "Int") {
                    tInt2 = cast(tSub.lVal : Expr -> Int);
                    simplification( Sum(Int(tInt.val + tInt2.val), tSub.rVal) );
                } else if (tSub.rVal.structname == "Int") {
                    tInt2 = cast(tSub.rVal : Expr -> Int);
                    simplification( Sum(tSub.lVal, Int(tInt.val - tInt2.val)) );
                } else {
                    Sum(a, b);
                }
            }
            else if (a.structname == "Int" && b.structname == "Sub") {
                simplification( Sum(b, a) );
            }
            else if (b.structname == "Neg") {
                tNeg = cast(b : Expr -> Neg);
                Sub(a, tNeg.val);
            }
            else Sum(a, b);
        Div(a, b) : 
            if (a == Int(0)) Int(0)
            else if (a == b) Int(1)
            else if (a.structname == "Int" && b.structname == "Int") {
                tInt  = cast(a : Expr -> Int);
                tInt2 = cast(b : Expr -> Int);
                Int(tInt.val / tInt2.val);
            }
            else Div(a, b);
        Sub(a, b) :
            simplification( Sum(a, Neg(b)) );
        Neg(a) :
            if (a == Int(0)) a
            else if (a.structname == "Neg") {
                tNeg = cast(a : Expr -> Neg);
                tNeg.val;
            }
            else Neg(a);
        Int(a) :
            Int(a);
        Var(a) :
            Var(a);
	}
}