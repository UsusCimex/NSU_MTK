// import calc;
// import calcRpn;
// import calcRat;
// import calcDiff;
// import calcPolynomRat;
import simplificationIdentities;


main() {
    //Default calculator test
    // test = "( ((1 +      2) * 3)  + 4)";
    // test2 = "((2 + 3) * (2 * 3))";
    // exp = parse(test);
    // println("TREE: " + expr2s(exp));
    // solve = calculate(exp);
    // println(solve);

    //RPN calculator test
    // test = "(((2 + 3) * (2 * 3)) + 5)";
    // println("ORIG: " + test);

    // exp = parse(test);
    // rpnFormat = expr2rpn(exp);
    // println("RPN: " + rpn2s(rpnFormat));
    // println("result: " + i2s(calculateRPN(rpnFormat)));

    // exp2 = rpn2expr(rpnFormat);
    // println("EXPR: " + expr2s(exp2));

    //Rational calculator test
    // testRational = "- ((((5 * 3) / (4 * 2)) / 3) * a)";
    // testRational = "(1/(x-(2/4)))";
    // params = setTreeValues(makeTree(), [Pair("x", ratNum(1, 2))]);
    // expRat = parse(testRational);
    // println("TREE2: " + expr2s(expRat));
    // solveRat = calculateRat(expRat, params);
    // println(ratNum2s(solveRat));

    //Differentiation test
    // testDifferential = "((3 * (x*x)) + ((-5*x) + 7))";
    // testDifferetial2 = "((((5*x)*x) + (3*x)) + 1)";
    // testDifferetial3 = "((x*x)*x)";

    // exp = parse(testDifferential);
    // println("func1: " + expr2s(exp));
    // diffExp = differentiation(exp, Var("x"));
    // println("Differencial fucn1: " + expr2s(diffExp) + "\n");

    // exp2 = parse(testDifferetial2);
    // println("func2: " + expr2s(exp2));
    // diffExp2 = differentiation(exp2, Var("x"));
    // println("Differencial fucn2: " + expr2s(diffExp2) + "\n");
    
    // exp3 = parse(testDifferetial3);
    // println("func3: " + expr2s(exp3));
    // diffExp3 = differentiation(exp3, Var("x"));
    // println("Differencial fucn3: " + expr2s(diffExp3) + "\n");

    //Polynom calculator test
    // testPolynom = "((((20+y)*x) + x)/(4*x))";
    // testPolynom = "((((x*x)*2)+3)-(2*(x*x)))";
    // testPolynom = "((((5*x)*x) + ((6*(x*y)) + ((5+y)*(x * x)))) / (2*x))";
    // testPolynom = "(((x/y)+1)+((y/x)+(x/y)))";
    // testPolynom = "((((a + 1) / (7 * c)) * ((7 + (6 * c)) / x)) / ((3 * (a + 1)) / (x * x)))";
    // testPolynom = "((((x - 6) / (6 * y)) / (((x * x) - (y * y)) / y)) * (((x * x) + ((2 * (x * y)) + (y * y))) / x))";
    // testPolynom = "(((4 * (a * a)) - 9) * ((1 / ((2 * a) - 3)) - (1 / ((2 * a) + 3))))";
    // testPolynom = "(((3 * x) / (x + 2)) + ((y * x) / (5 + x)))";
    // exp = parse(testPolynom);
    // println("func: " + expr2s(exp));
    // params = setTreeValues(makeTree(), [Pair("y", ratNum(1, 1))]);
    // params = makeTree();
    // polynom = calculatePolynomRatArr(exp, params, [Var("a"), Var("c"), Var("x"), Var("y")], Var("x"));
    // println("polynom: " + ratPolynom2s(polynom));

    //Identities polynom test
    testNum = "(--((x*x)*(x*x)) - ((y*y)*(y*y)))";
    // testNum = "(((z * (x * x)) + (z * (2*(x*y)))) + (z * (y*y)))";
    // testNum = "((z*z)-(1*1))";
    // testDen = "(((z*z) + (2*(z*1))) + (1*1))";
    testDen = "1";
    polynom = ratPolynom(parse(testNum), parse(testDen));
    println("Func: " + ratPolynom2s(Some(polynom)));
    simpl = simplificationByIdentities(polynom,
        [
         Pair("((x*x)-(y*y))", "((x-y)*(x+y))"),
         Pair("--x","x"),
         Pair("(((x*x)+(2*(x*y)))+(y*y))", "((x+y)*(x+y))"),
         Pair("((x*y)+(x*z))", "(x*(y+z))"),

         Pair("(x/x)", "1"),
         Pair("((x*y)/x)", "y"),
         Pair("((y*x)/x)", "y"),
         Pair("((x*y)/(x*z))", "(y/z)"),
         Pair("((x*y)/(z*x))", "(y/z)"),
         Pair("((y*x)/(x*z))", "(y/z)"),
         Pair("((y*x)/(z*x))", "(y/z)")
        ]);
    println("simpl: " + ratPolynom2s(Some(simpl)));
    quit(0);
}