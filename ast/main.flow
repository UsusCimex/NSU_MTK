// import calc;
// import calcRpn;
// import calcRat;
import calcDiff;


main() {
    //Default calculator test
    // test = "( ((1 +      2) * 3)  + 4)";
    // test2 = "((2 + 3) * (2 * 3))";
    // exp = parse(test);
    // println("TREE: " + expr2s(exp));
    // solve = calculate(exp);
    // println(solve);

    //RPN calculator test
    // test = "(((2 + 3) * (2 * 3)) + 5)";
    // println("ORIG: " + test);

    // exp = parse(test);
    // rpnFormat = expr2rpn(exp);
    // println("RPN: " + rpn2s(rpnFormat));
    // println("result: " + i2s(calculateRPN(rpnFormat)));

    // exp2 = rpn2expr(rpnFormat);
    // println("EXPR: " + expr2s(exp2));

    //Rational calculator test
    // testRational = "- ((((5 * 3) / (4 * 2)) / 3) * a)";
    // testRational = "(1/(x-(2/4)))";
    // params = setTreeValues(makeTree(), [Pair("x", ratNum(1, 2))]);
    // expRat = parse(testRational);
    // println("TREE2: " + expr2s(expRat));
    // solveRat = calculateRat(expRat, params);
    // println(ratNum2s(solveRat));

    //Differentiation test
    testDifferential = "((5 * x) + 5)";
    testDifferetial2 = "((((5*x)*x) + (3*x)) + 1)";
    testDifferetial3 = "(1/x)";

    exp = parse(testDifferential);
    println("func1: " + expr2s(exp));
    diffExp = differentiation(exp, Var("x"));
    println("Differencial fucn1: " + expr2s(diffExp) + "\n");

    exp2 = parse(testDifferetial2);
    println("func2: " + expr2s(exp2));
    diffExp2 = differentiation(exp2, Var("x"));
    println("Differencial fucn2: " + expr2s(diffExp2) + "\n");
    
    exp3 = parse(testDifferetial3);
    println("func3: " + expr2s(exp3));
    diffExp3 = differentiation(exp3, Var("x"));
    println("Differencial fucn3: " + expr2s(diffExp3) + "\n");



    //Polynom calculator test
    

    quit(0);
}